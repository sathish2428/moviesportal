{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","placeholder","onChange","handleInput","onKeyPress","search","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","API_URL","useState","s","state","setState","e","target","value","prevState","console","log","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAEO,SAASA,EAAOC,GACnB,OACI,6BAASC,UAAU,kBACf,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBF,UAAU,YAAYG,SAAUJ,EAAMK,YAAaC,WAAYN,EAAMO,U,oBCH1H,SAASC,EAAT,GAAoC,IAAnBC,EAAkB,EAAlBA,OAAOC,EAAW,EAAXA,UAC3B,OACI,yBAAKT,UAAU,SAASU,QAAS,kBAAKD,EAAUD,EAAOG,UACnD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,QCHjB,SAASC,EAAQhB,GACpB,OACI,6BAASC,UAAU,WACdD,EAAMiB,QAAQC,KAAI,SAAAT,GAAM,OACrB,kBAACD,EAAD,CAAQW,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWV,EAAMU,gBCLtE,SAASU,EAAT,GAAsC,IAAtBC,EAAqB,EAArBA,SAASC,EAAY,EAAZA,WAC5B,OACI,6BAASrB,UAAU,SACf,yBAAKA,UAAU,WACX,4BAAKoB,EAASN,MAAd,IAAqB,8BAAOM,EAASE,MAArC,KACA,uBAAGtB,UAAU,UAAb,YAAgCoB,EAASG,YACzC,yBAAKvB,UAAU,QACX,yBAAKY,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,OAEjB,4BAAQxB,UAAU,QAAQU,QAASW,GAAnC,WCsDDI,MA7Df,WACE,IACMC,EAAO,yCADG,YADH,EAGYC,mBACvB,CACEC,EAAG,GACHZ,QAAQ,GACRI,SAAS,KAPA,mBAGNS,EAHM,KAGAC,EAHA,KA+Cb,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cACjB,4CACA,8BACE,kBAACF,EAAD,CAAQM,YA/BK,SAAC2B,GACnB,IAAIH,EAAGG,EAAEC,OAAOC,MAChBH,GAAS,SAAAI,GACL,OAAO,2BAAIA,GAAX,IAAqBN,EAAEA,OAE3BO,QAAQC,IAAIP,EAAMD,IA0BqBtB,OAzC1B,SAACyB,GACL,UAAVA,EAAEb,KACHmB,IAAMX,EAAQ,MAAOG,EAAMD,GAAGU,MAAK,YAAa,IAC1CtB,EADyC,EAAVuB,KAChBzC,OACnBgC,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAsBlB,QAAQA,aAqC3B,kBAACD,EAAD,CAASC,QAASa,EAAMb,QAASP,UAxBtB,SAAC+B,GACjBH,IAAMX,EAAU,MAAOc,GAAIF,MAAK,YAAa,IACvC9B,EADsC,EAAV+B,KAEhCJ,QAAQC,IAAI5B,GACZsB,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAsBd,SAAUZ,OAGlC2B,QAAQC,IAAIP,SAiBwB,oBAAxBA,EAAMT,SAASN,OAAuB,kBAACK,EAAD,CAAOC,SAAUS,EAAMT,SAAUC,WAbpE,WACfS,GAAS,SAAAI,GACP,kCAAUA,GAAV,IAAoBd,SAAS,eCpCjBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.5c6b52ad.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Search(props){\n    return (\n        <section className=\"searchbox-wrap\">\n            <input type=\"text\" placeholder=\"Search a movie\" className=\"searchbox\" onChange={props.handleInput} onKeyPress={props.search}/>\n        </section>\n    )\n}","import React from \"react\";\n\nexport function Result({result,openPopup}){\n    return (\n        <div className=\"result\" onClick={()=> openPopup(result.imdbID)}>\n            <img src={result.Poster} />\n            <h3>{result.Title}</h3>\n        </div>\n    )\n}","import React from \"react\";\nimport {Result} from \"./Result\"\n\nexport function Results(props){\n    return (\n        <section className=\"results\">\n            {props.results.map(result => (\n                <Result key={result.imdbID} result={result} openPopup={props.openPopup}/>\n            ))}\n        </section>\n    );\n}","import React from \"react\";\n\nexport function Popup({selected,closePopup}){\n    return(\n        <section className=\"popup\">\n            <div className=\"content\">\n                <h2>{selected.Title} <span>{selected.Year}</span> </h2>\n                <p className=\"rating\">Rating\": {selected.imdbRating}</p>\n                <div className=\"plot\">\n                    <img src={selected.Poster} />\n                    <p>{selected.Plot}</p>\n                </div>\n                <button className=\"close\" onClick={closePopup}>Close</button>\n            </div>\n        </section>\n    )\n}","import React, {useState} from 'react';\nimport {Search} from \"./components/Search\";\nimport axios from \"axios\";\nimport {Results} from \"./components/Results\"\nimport {Popup} from \"./components/Popup\"\nfunction App() {\n  const API_KEY = '28c9d3b7';\n  const API_URL = `http://www.omdbapi.com/?apikey=${API_KEY}`;\n  const [state,setState] = useState(\n    {\n      s: \"\",\n      results:[],\n      selected:{}\n    }\n  );\n\n  const search = (e) => {\nif(e.key === \"Enter\"){\n  axios(API_URL+\"&s=\"+ state.s).then(({data}) => {\n    let results = data.Search;\n    setState(prevState => {\n      return {...prevState, results:results}\n    })\n  });\n}\n  }\n  const handleInput = (e) =>{\n    let s =e.target.value;\n    setState(prevState => {\n        return {...prevState,s:s}\n    })\n    console.log(state.s)\n  }\n\n  const openPopup = (id) =>{\n    axios(API_URL + \"&i=\" +id).then(({data}) => {\n      let result = data;\n      console.log(result)\n      setState(prevState => {\n        return {...prevState, selected: result};\n        \n      })\n      console.log(state)\n    })\n  }\n\n  const closePopup = () => {\n      setState(prevState => {\n        return{...prevState,selected:{}}\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <h1>MoviesPortal</h1>\n       <main>\n         <Search handleInput={handleInput} search={search}/>\n         <Results results={state.results} openPopup={openPopup}/>\n         {(typeof state.selected.Title != \"undefined\" ? <Popup selected={state.selected} closePopup={closePopup} /> : false)}\n       </main>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}